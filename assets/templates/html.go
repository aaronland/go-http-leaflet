// Code generated by go-bindata.
// sources:
// templates/html/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x6f\xe3\x36\x10\x3d\x4b\xbf\x62\xaa\x45\x01\x19\xb0\xe5\x8f\x74\xbd\x1b\xc9\x32\xd0\x2d\x16\xd8\x02\x6e\x0f\x45\xd2\x43\x8b\xc2\xa0\xc5\xb1\xc5\x86\x22\x09\x8a\x72\xec\x18\xf9\xef\x05\x49\x49\x91\xdd\x76\xd1\x43\x2f\x89\x48\xcd\xbc\x37\xf3\xe6\x8d\xe0\xcb\x05\x28\xee\x99\x40\x88\x2a\xa2\x22\x78\x7d\x0d\x57\xa5\xa9\xf8\x3a\x04\x00\x58\x95\x48\xe8\x3a\x0c\x56\x86\x19\x8e\x6b\x8a\xbb\xe6\xb0\x9a\xfa\x43\x18\xac\x6a\x73\xe6\x08\xe6\xac\x30\x8f\x0c\x9e\xcc\xb4\xa8\xeb\x68\x1d\x06\xb0\x93\xf4\x0c\x97\x30\xa8\x88\x3e\x30\x91\xc2\x4c\x9d\xb2\x30\x50\x84\x52\x26\x0e\xed\xf1\x35\x0c\x13\x8e\x64\xcf\xd1\x4c\x0c\xe3\x68\xe3\x77\x52\x53\xd4\x29\xcc\xd5\x09\x6a\xc9\x19\x85\x1d\x6f\x30\x0b\x83\x1d\x29\x9e\x0e\x5a\x36\x82\x4e\x0a\xc9\xa5\x4e\x15\x13\x4f\x0e\xe3\x5d\x45\x94\x4d\x7d\x66\xd4\x94\xe9\x7c\x36\xfb\x36\x0b\x83\x12\xd9\xa1\x34\xe9\xc7\xd9\xb1\xf4\x41\x45\xa3\x35\x0a\x33\x31\x58\x29\x4e\x8c\x23\xdb\x4b\x61\x26\x7b\x52\x31\x7e\x4e\x2b\x29\x64\xad\x48\x61\xb9\x28\xab\x15\x27\xe7\x74\xc7\x65\xf1\x94\x85\x81\xed\x6c\x42\x38\x3b\x88\xb4\x40\x61\x50\x67\x5d\x63\x13\x23\x55\x9a\x2c\xde\x6b\xac\x6e\x68\xda\x7e\xfe\x2f\x0a\xcf\x10\xf8\xd6\xdf\x2d\x97\xcb\x96\x4e\x0a\xa3\x25\xaf\x2d\x55\x27\x6e\x17\xeb\xf5\x80\x8f\xb3\xe3\x73\x36\x18\x04\x90\xc6\xc8\x6b\xf4\x85\x4d\x08\x82\x6b\x44\x26\x54\x63\xde\x74\xed\x70\x5c\x43\x35\x7b\xc1\x74\xde\x11\xfd\xad\xce\xa0\xbf\xdb\x49\x63\x64\xd5\x95\x74\x85\xbf\x6b\x8c\x91\xa2\xd7\xc8\x41\x26\x1f\x3d\x62\xeb\x02\x6f\x00\x53\x32\x31\xf4\x4e\xb2\x1c\xd2\xa6\x33\x75\x82\x6f\x58\xa5\xa4\x36\x44\x18\x47\x12\xac\xa6\xce\x98\xad\x85\xa7\xde\xc3\xee\xd9\xfa\xd2\x1a\x97\xb2\x23\x30\x9a\x3b\xcb\xaf\x57\x53\xca\x8e\xce\xce\x8a\x08\x77\x7d\xeb\x96\x68\x9d\x24\x49\xb2\x9a\xda\x80\x7f\x0e\x64\x1c\x2d\x90\x0b\x08\x06\x04\x5d\xbf\x6e\x2b\x6c\x05\x5e\xd7\xb7\x95\x89\x5c\x58\xa3\xf9\xb6\x27\x03\x41\x2a\xbc\xbd\x3b\x12\xde\x60\x1e\x45\xa0\x38\x29\xb0\x94\x9c\xa2\xce\xa3\xcf\xd6\x2b\x40\x04\x10\x6e\x50\x0b\x6b\xec\xc7\x5f\x36\xd0\xbb\xbc\x44\x8d\x11\x4c\x3b\xf2\x56\x74\xcf\x5e\x37\xbb\x8a\x75\xfc\x8a\xba\x36\x1f\xdd\xff\xd5\xd4\x07\xda\x56\xbd\x36\x5e\x48\xaf\x9e\x7b\xae\x0b\xcd\x94\x59\x87\xee\x04\x47\xa2\xa1\x22\x2a\x7b\x3b\x71\x72\xb6\x26\x76\x67\xff\xd7\xae\x69\x0e\x9b\xa4\x22\x2a\x76\xba\x8f\x92\x1a\xcd\xaf\x0c\x9f\xe3\xdf\xef\x3e\x24\xcb\xf9\x87\xfb\xfb\x31\x4c\xe6\x8b\x45\x72\xf7\x61\x76\xff\xdd\xdd\x1f\x63\x98\xdf\x8d\x5a\x0c\x81\xcf\xb0\x49\xbe\x90\xba\x8c\x2b\xa2\x46\x59\xd8\x83\x26\x52\xc4\x51\xc1\x59\xf1\x14\x8d\x61\xdf\x88\xc2\x30\x29\x62\x1c\x5d\xc2\x30\xf0\xa5\x70\xc8\x01\x13\x4e\x0c\x17\x87\xac\xbd\x7c\x91\xb2\x82\xdc\xe5\x1f\xd0\xfc\x26\x65\x15\x5b\x50\xff\xb2\x90\x52\xd3\xba\x7d\xad\xb4\xfc\x13\x0b\x13\x73\x3e\x76\x59\xa3\x84\xb2\x23\xa3\xf8\xe9\x1c\x2f\xde\x2f\x47\xc9\x9e\x4b\xa9\x6d\x72\xd0\xe6\x25\x2f\x90\xbb\xc8\x1e\xcf\xba\x63\xdb\x68\x5b\x87\xd3\xc5\x52\x3e\x30\x8e\x8f\x9a\xc7\x3e\x67\xc0\xed\x1d\xb5\x75\x5f\x90\x1c\xa8\x2c\x9a\x0a\x85\xb1\x29\x9f\x39\xda\xc7\x4f\xe7\x1f\x69\x7c\xed\xbc\xb7\x74\xce\xc4\xd3\x30\xad\xd0\x48\x0c\xb6\x99\x71\x44\x22\x57\xa8\x8d\xb2\xea\x7f\x6f\x8c\x66\xbb\xc6\x60\x1c\x95\x1a\xf7\xd1\xb8\x2f\xf5\xdf\xc2\x0c\xd1\x07\x34\xd1\x18\xa2\x6d\xc7\xdc\xc6\x11\xa5\x50\xd0\x1f\x4a\xc6\x69\x7c\x43\xff\x80\x27\xf3\xb3\xa4\x18\xf7\xe8\x2e\xcd\x2a\x36\xe8\x36\x61\x42\xa0\xfe\xf2\xf0\xd3\x06\x72\x88\xa2\xec\xf6\xf5\x90\xc0\x32\x76\xd6\x78\xed\xdd\x60\x05\x68\x2d\xfe\x15\xe5\x5a\xaf\x8f\x06\x6e\xed\xf7\xe5\x6b\x69\xc3\x75\x1c\x26\xb7\x45\xfe\xa7\x61\xdd\xe6\xdf\x2c\xcc\x96\xe8\x83\xf5\xdd\x25\x0c\xa0\x62\xc2\xda\x32\x85\xf9\xd8\x9e\xc8\xc9\x9f\x16\xb3\x71\xdb\xf6\xb0\xeb\x1a\xcd\xd6\x21\x40\xfe\xb6\x03\xc3\x8a\xfd\x3a\xb0\x3d\xc4\x2e\x6c\x74\xf1\x5f\x04\xe7\x70\x8d\x95\x3c\xe2\xc6\xde\xb7\x6f\xad\xf6\xaf\x7e\x42\x1d\xea\x26\xb1\x43\xf0\x41\x43\xe0\xf1\xa0\x72\x6f\x06\xe7\x70\x42\xe9\x83\x6c\x57\x75\x38\x69\x3f\x64\x6b\x08\xc8\x61\x88\x93\xf5\x5d\x0d\x84\xf1\xc3\x4c\xa4\x70\xfb\x3d\xec\xcd\x35\x30\xcc\x87\xbc\x9f\x62\xe2\xbe\x95\x96\xb7\x97\xe5\x5a\x8b\xec\x5a\xc1\xd5\xb4\xfb\x9a\xad\xa6\xfe\xa7\xcf\xe5\x02\x28\xa8\xfd\x2d\xf4\x57\x00\x00\x00\xff\xff\x5a\xeb\x33\xb8\x1f\x09\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 2335, mode: os.FileMode(420), modTime: time.Unix(1567706480, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/index.html": templatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

