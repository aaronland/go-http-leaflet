// Code generated by go-bindata.
// sources:
// templates/html/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x51\x6f\xdb\x36\x10\x7e\x96\x7e\xc5\x4d\xc5\x30\x19\xb0\x25\x3b\x59\xd3\x56\x96\x02\xac\x43\xb1\x16\xc8\xf6\x50\xa4\x7b\xd8\x30\x04\xb4\x78\xb6\xb8\x50\x24\x41\x51\x4e\x1c\x23\xff\x7d\x20\x29\xcb\xb4\x9b\x15\x7b\xd8\x4b\x2b\x51\x77\xf7\xdd\x7d\xf7\x7d\x8c\xf7\x7b\xa0\xb8\x66\x02\x21\x69\x89\x4a\xe0\xf9\x39\x2e\x1b\xd3\xf2\xeb\x18\x00\xa0\x6c\x90\xd0\xeb\x38\x2a\x0d\x33\x1c\xaf\x29\xae\xfa\x4d\x99\xfb\x97\x38\x2a\x3b\xb3\xe3\x08\x66\xa7\xb0\x4a\x0c\x3e\x9a\xbc\xee\xba\xe4\x3a\x8e\x60\x25\xe9\x0e\xf6\x71\x14\x41\x4b\xf4\x86\x89\x02\xe6\xea\x71\x69\xdf\x15\xa1\x94\x89\xcd\xe1\x00\x9e\x23\x88\xe3\x08\x32\x8e\x64\xcd\xd1\xcc\x0c\xe3\xe8\x33\x57\x52\x53\xd4\x05\x2c\xd4\x23\x74\x92\x33\x0a\x2b\xde\xa3\x2b\xb2\x22\xf5\xfd\x46\xcb\x5e\xd0\x59\x2d\xb9\xd4\x85\x62\xe2\xde\x55\x8b\x23\x88\x23\x78\xd5\x12\xe5\x8b\x3c\x30\x6a\x9a\x62\x31\x9f\x7f\xef\x12\x1b\x64\x9b\xc6\x14\x6f\xe7\xdb\x26\x0c\xaf\x7b\xad\x51\x98\x99\xc1\x56\x71\x62\x86\x06\xd6\x52\x98\xd9\x9a\xb4\x8c\xef\x8a\x56\x0a\xd9\x29\x52\x7b\x7c\xca\x3a\xc5\xc9\xae\x58\x71\x59\xdf\xbb\x13\x3b\xfd\x8c\x70\xb6\x11\x45\x8d\xc2\xa0\x5e\x1e\x87\x9f\x19\xa9\x8a\xec\xe2\xb5\xc6\xf6\x45\xd0\x71\xe2\xff\x17\x70\xc0\x8b\xc0\x53\xf4\xea\xea\xea\xea\x04\x5e\x0a\xa3\x25\xef\x3c\xf4\x61\x2d\xc7\x2c\xcf\x1c\xbc\x9d\x6f\x1f\x96\x27\x8b\x04\xd2\x1b\x79\x8e\x76\x61\xd3\xa2\xe8\xa5\xfa\x4c\xa8\xde\x84\xdb\x38\xd6\x74\x03\x77\xec\x09\x8b\xc5\x11\xf8\xab\x19\xa2\xe0\x74\x25\x8d\x91\xed\xd8\xe6\xd7\x68\xab\xde\x18\x29\x02\x3e\x5d\xf9\xec\xed\xa1\xfa\xa0\x2a\x2f\x28\xd3\x30\x71\xaa\xca\xec\xea\xb4\x8d\x62\xae\x1e\xe1\x3b\xd6\x2a\xa9\x0d\x11\xe6\x08\x59\xe6\x4e\xfc\x83\x4d\x72\xef\x13\xf7\xec\xb4\x4f\x89\x21\x6e\xb3\xb3\x5e\xf3\x2a\xd9\xef\x21\xbb\x65\x1c\xbf\x7c\xbe\x81\xe7\x67\x6b\x91\x92\xb2\x2d\x30\x5a\x39\xd7\x5d\x97\x39\x65\x5b\xe7\x28\x45\x84\x3b\x3e\x97\x64\x72\x9d\x65\x59\x56\xe6\x36\xe0\xe5\x40\xc6\xd1\x16\x72\x01\x51\x00\x70\xa0\xc6\x19\xd3\x36\xe8\x17\x72\x74\x6d\xe2\xc2\x7a\xcd\xef\x46\x30\x10\xa4\xc5\xf3\xb3\x2d\xe1\x3d\x56\x49\x02\x8a\x93\x1a\x1b\xc9\x29\xea\x2a\xf9\x60\xc5\x07\x44\x00\xe1\x06\xb5\xb0\xee\xb1\x53\x8e\x56\x6a\x50\x63\x02\xf9\x01\x7c\xd8\x8f\x47\xef\xfa\x55\xcb\x0e\xf8\x8a\xba\x31\xbf\xb8\xff\xcb\xdc\x07\xda\x51\x3d\x37\x9e\x67\x4b\xee\xf0\xdc\xd5\x9a\x29\xe3\x5f\xc0\xff\xbb\x25\x1a\x5a\xa2\x96\xc7\x37\x4e\x76\xd6\x1a\x41\x8c\xbd\x1a\x2a\xb8\xc9\x5a\xa2\x52\x47\xfe\x24\xeb\xd0\xfc\xce\xf0\x21\xfd\xf3\xf2\x4d\x76\xb5\x78\xf3\xee\xdd\x14\x66\x8b\x8b\x8b\xec\xf2\xcd\xfc\xdd\x8f\x97\x7f\x4d\x61\x71\x39\x19\x6a\x08\x7c\x80\x9b\xec\x23\xe9\x9a\xb4\x25\x6a\xb2\x8c\xc7\xa2\x99\x14\x69\x52\x73\x56\xdf\x27\x53\x58\xf7\xa2\x36\x4c\x8a\x14\x27\x7b\x7b\xbd\xb9\x56\x38\x54\x80\x19\x27\x86\x8b\xcd\x72\x38\x7c\x92\xb2\x85\xca\xe5\x6f\xd0\xfc\x21\x65\x9b\xda\xa2\xfe\x63\x2d\xa5\xa6\xdd\xf0\x59\x69\xf9\x37\xd6\x26\xe5\x7c\xea\xb2\x26\x19\x65\x5b\x46\xf1\xfd\x2e\xbd\x78\x7d\x35\xc9\xd6\x5c\x4a\x6d\x93\xa3\x21\x2f\x7b\x82\xca\x45\x8e\xf5\xac\x44\xee\x7a\x6d\xfb\x70\xbc\x58\x48\xa7\x4a\xcd\x53\x9f\x13\x60\x7b\x59\xdd\xb9\xdb\xa9\x02\x2a\xeb\xbe\x45\x61\x6c\xca\x07\x8e\xf6\xf1\xfd\xee\x13\x4d\x4f\xe5\x77\x4c\xe7\x4c\xdc\x87\x69\xb5\x46\x62\x70\xc8\x4c\x13\x92\xb8\x46\x6d\x94\x65\xff\x27\x63\x34\x5b\xf5\x06\xd3\xa4\xd1\xb8\x4e\xa6\x63\xab\xff\x16\x66\x88\xde\xa0\x49\xa6\x90\xdc\x1d\x90\x87\x38\xa2\x14\x0a\xfa\x73\xc3\x38\x4d\xcf\xe0\x6f\xf1\xd1\xfc\x26\x29\xa6\x63\x75\x97\x66\x19\x0b\xa6\xcd\x98\x10\xa8\x3f\xde\xfe\x7a\x03\x15\x24\xc9\xf2\xfc\x73\x08\x60\x11\x0f\xd2\x78\x1e\xd5\x60\x09\x18\x74\xfe\x0d\xe6\x06\xc1\x4f\x02\xb5\x8e\xa6\xf9\x56\x5a\xe8\xc9\x30\x79\x68\xf2\x3f\x2d\xeb\x3c\xff\xcc\x30\x77\x44\x6f\xac\xee\xf6\x71\x04\x2d\x13\x56\x96\x05\x2c\xa6\xf6\x8d\x3c\xfa\xb7\x8b\xf9\x74\x18\x3b\x9c\xba\x43\x73\xe7\x2a\x40\x75\xf4\x40\xd8\xb1\xb7\x03\x5b\x43\xea\xc2\x26\x7b\x7f\x2d\x38\x85\x6b\x6c\xe5\x16\x6f\xec\xf9\xf0\x35\xb8\xe1\x0f\x55\x6f\x32\xbb\x04\x1f\x14\x16\x9e\x06\x9d\x7b\x31\x38\x85\x13\x4a\x6f\xe5\x60\xd5\x70\xd3\x7e\xc9\x56\x10\x50\x41\x58\x67\x39\x4e\x15\x10\xe3\x97\x99\x49\xe1\xfc\x1d\xce\xe6\x06\x08\xf3\xa1\x1a\xb7\x98\xb9\x0b\xd3\xe2\x8e\xb4\x9c\x72\xb1\x7c\x81\xc1\xc0\xa3\xe3\x1a\xed\xa5\x67\x77\x19\xe8\xff\xe4\xef\x4b\x32\x2a\xcf\x12\x3b\x8a\xdb\xb6\x16\x96\xc3\x5a\x52\xfc\xf2\xf9\xd3\x31\x62\x19\xe5\x39\x08\xac\xb1\xeb\x88\xde\xc1\x0a\x6b\xd2\x77\x08\x72\x0d\xbf\xc8\x1f\x3a\xc0\xae\x26\x8a\x89\x0d\x74\xa6\x5f\xaf\x4f\xe6\x08\xfc\xe9\x67\xb0\xec\x1e\x19\x2b\xf3\xc3\xed\x5c\xe6\xfe\xd7\xe4\x7e\x0f\x28\xa8\xfd\x79\xf9\x4f\x00\x00\x00\xff\xff\x87\xb9\x90\xc7\x72\x0a\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 2674, mode: os.FileMode(420), modTime: time.Unix(1572897685, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/index.html": templatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

